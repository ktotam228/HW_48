package core;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.math.BigDecimal;import java.math.RoundingMode;import java.net.URL;import java.util.concurrent.TimeUnit;import java.util.logging.Level;import java.util.logging.Logger;import org.json.simple.JSONObject;import org.json.simple.parser.JSONParser;import org.json.simple.parser.ParseException;import org.openqa.selenium.By;import org.openqa.selenium.WebDriver;import org.openqa.selenium.chrome.ChromeDriver;import org.openqa.selenium.chrome.ChromeOptions;import org.openqa.selenium.firefox.FirefoxDriver;import org.openqa.selenium.support.ui.WebDriverWait;public class OneMethod {	static WebDriver driver;	public static void main(String[] args) throws IOException, ParseException {		// Country, Currency, tyte of currency		JSONParser jp = new JSONParser();		URL cc = new URL("http://www.geoplugin.net/json.gp?ip=140.168.135.1");		BufferedReader in = new BufferedReader(new InputStreamReader(cc.openConnection().getInputStream()));		JSONObject cc_json = (JSONObject) jp.parse(in);				String countryName = (String) cc_json.get("geoplugin_countryName");		String currencySymbol = (String) cc_json.get("geoplugin_currencySymbol_UTF8");		String currencyCode = (String) cc_json.get("geoplugin_currencyCode");		System.out.println("Country: \t\t" + cc_json.get("geoplugin_countryName"));		System.out.println("Currency Code: \t\t" + cc_json.get("geoplugin_currencyCode"));		System.out.println("Currency Symbol: \t" + cc_json.get("geoplugin_currencySymbol_UTF8"));		String usa_code = "USD";//		String local_code = (String) cc_json.get("geoplugin_currencyCode"); // EUR		String pair_code = usa_code + currencyCode; // USDEUR		String rate_sql = "select%20*%20from%20yahoo.finance.xchange%20where%20pair%20in%20(\"" + pair_code + "\")";		URL rate_url = new URL("http://query.yahooapis.com/v1/public/yql?q=" + rate_sql				+ "&format=json&env=store://datatables.org/alltableswithkeys");		JSONObject rate_json = (JSONObject) jp				.parse(new BufferedReader(new InputStreamReader(rate_url.openConnection().getInputStream())));		JSONObject query = (JSONObject) rate_json.get("query");		JSONObject results = (JSONObject) query.get("results");		JSONObject rate = (JSONObject) results.get("rate");		String usd_eur_rate =  (String) rate.get("Rate");		int myRate = Integer.parseInt(usd_eur_rate);		System.out.println("_________________");		System.out.println("Rate: "+myRate);		System.out.println("_________________");								String us_currency_symbol = "$";		         String ip_Euro = "88.191.179.56";        String ip_Yuan = "61.135.248.220";        String ip_Pound = "92.40.254.196";        String ip_Hryvnia = "93.183.203.67";        String ip_Ruble = "213.87.141.36";       ////////////////////////////////////////////////////////////////////////////////        Logger logger = Logger.getLogger("");logger.setLevel(Level.OFF);       String url = "https://www.amazon.com/All-New-Amazon-Echo-Dot-Add-Alexa-To-Any-Room/dp/B01DFKC2SO";       String driverPath = "";              if (System.getProperty("os.name").toUpperCase().contains("MAC"))    	   driverPath = "./resources/webdrivers/mac/geckodriver.sh";    	          else if (System.getProperty("os.name").toUpperCase().contains("WINDOWS"))    	   driverPath = "./resources/webdrivers/pc/geckodriver.exe";    	          else throw new IllegalArgumentException("Unknown OS");    	                           	                        System.setProperty("webdriver.gecko.driver", driverPath);    	                        driver = new FirefoxDriver();    	                        driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);    	                        driver.manage().window().maximize();    	                        WebDriverWait wait = new WebDriverWait(driver, 15);                                    WebDriver driver;        System.setProperty("webdriver.chrome.driver", "./src/main/resources/webdrivers/mac/chromedriver");        System.setProperty("webdriver.chrome.silentOutput", "true");        ChromeOptions option = new ChromeOptions();        option.addArguments("-start-fullscreen");        driver = new ChromeDriver(option);        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);        driver.get(url);       // All-New Echo Dot (2nd Generation) - Black        String product_title = driver.findElement(By.id("productTitle")).getText();   double original_price = Double.parseDouble(driver.findElement(By.id("priceblock_ourprice")).getText().replace("$", "")); // 49.00              driver.quit();System.out.println("Original price: "+original_price);       ////////////////////////////////////////////////////////////////////////////////        URL api_url = new URL("http://www.geoplugin.net/json.gp?ip=" + ip_Ruble);       //////////////////////////////////////////////////////////////////////////////// double eur_price = new BigDecimal(original_price * myRate).setScale(2, RoundingMode.HALF_UP).doubleValue(); //      double eur_price = original_price*rate; System.out.println("Item: " + product_title + "; "                             + "US Price: " + us_currency_symbol + original_price + "; "                             + "for country: " + countryName + "; "                             + "Local Price: " + currencySymbol + eur_price);  driver.quit();			}}